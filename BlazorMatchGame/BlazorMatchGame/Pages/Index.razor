@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

@page "/"

@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>
<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button type="button" @onclick="@(() => ButtonClick(animal, uniqueDescription))" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="row">
        <h2>Best time: @bestTime</h2>
    </div>
</div>

@code
{
    List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐱","🐱",
        "🦊","🦊",
        "🐮","🐮",
        "🐺","🐺",
        "🐭","🐭",
        "🦁","🦁",
        "🐯","🐯"
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    double bestTime;
    double currentTime;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
        .OrderBy(item => random.Next())
        .ToList();

        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        if (localStorage.ContainKey("BestTime"))
        {
            bestTime = localStorage.GetItem<double>("BestTime");
        }
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            lastAnimalFound = string.Empty;
            shuffledAnimals = shuffledAnimals
            .Select(a => a.Replace(animal, string.Empty))
            .ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";

                double currentTime = tenthsOfSecondsElapsed / 10.0;
                if (currentTime < bestTime || bestTime == 0)
                {
                    localStorage.SetItem("BestTime", currentTime);
                }
                SetUpGame();

            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }

}
